{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/ActiveChips.tsx"],"sourcesContent":["import React from \"react\";\nimport { Chip, Tooltip } from \"@nextui-org/react\";\nimport { TrendingUpIcon } from \"@/components/icons\";\n\ninterface ActiveChipsProps {\n  activeChips: Array<{\n    id: string;\n    color: \"default\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"danger\" | undefined;\n    icon: JSX.Element;\n    tooltipContent: JSX.Element;\n  }>;\n}\n\nexport const ActiveChips: React.FC<ActiveChipsProps> = ({ activeChips }) => {\n  return (\n    <div className=\"flex gap-1 justify-center\">\n      {activeChips.map((chip) => (\n        <Tooltip key={chip.id} color={chip.color} content={chip.tooltipContent}>\n          <Chip variant=\"flat\" color={chip.color}>\n            {chip.icon}\n          </Chip>\n        </Tooltip>\n      ))}\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;;;;;AAaO,MAAM,cAA0C,CAAC,EAAE,WAAW,EAAE;IACrE,qBACE,6LAAC;QAAI,WAAU;kBACZ,YAAY,GAAG,CAAC,CAAC,qBAChB,6LAAC,yNAAA,CAAA,UAAO;gBAAe,OAAO,KAAK,KAAK;gBAAE,SAAS,KAAK,cAAc;0BACpE,cAAA,6LAAC,gNAAA,CAAA,OAAI;oBAAC,SAAQ;oBAAO,OAAO,KAAK,KAAK;8BACnC,KAAK,IAAI;;;;;;eAFA,KAAK,EAAE;;;;;;;;;;AAQ7B;KAZa"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/TimerDisplay.tsx"],"sourcesContent":["import React from \"react\";\nimport { Progress } from \"@nextui-org/react\";\n\ninterface TimerDisplayProps {\n  remainingTime: number;\n  timerValue: number;\n  currentState: string;\n  formatTime: (time: number) => string;\n}\n\nexport const TimerDisplay: React.FC<TimerDisplayProps> = ({ remainingTime, timerValue, currentState, formatTime }) => {\n  return (\n    <div>\n      <div>\n        <span className=\"text-9xl font-bold\">\n          {formatTime(remainingTime)}\n        </span>\n      </div>\n\n      <Progress\n        size=\"sm\"\n        value={timerValue * 60 - remainingTime}\n        maxValue={timerValue * 60}\n        color=\"success\"\n        className=\"max-w-md\"\n        style={{ width: '85%', margin: 'auto', marginTop: '15px', visibility: currentState === \"neutral\" ? 'hidden' : 'visible'}}\n      />\n    </div>\n  );\n};"],"names":[],"mappings":";;;;;;;;AAUO,MAAM,eAA4C,CAAC,EAAE,aAAa,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE;IAC/G,qBACE,6LAAC;;0BACC,6LAAC;0BACC,cAAA,6LAAC;oBAAK,WAAU;8BACb,WAAW;;;;;;;;;;;0BAIhB,6LAAC,4NAAA,CAAA,WAAQ;gBACP,MAAK;gBACL,OAAO,aAAa,KAAK;gBACzB,UAAU,aAAa;gBACvB,OAAM;gBACN,WAAU;gBACV,OAAO;oBAAE,OAAO;oBAAO,QAAQ;oBAAQ,WAAW;oBAAQ,YAAY,iBAAiB,YAAY,WAAW;gBAAS;;;;;;;;;;;;AAI/H;KAnBa"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/TimerControls.tsx"],"sourcesContent":["import React from \"react\";\nimport { Button, Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Popover, PopoverTrigger, PopoverContent, Input } from \"@nextui-org/react\";\nimport { ClockIcon } from \"@/components/icons\";\n\ninterface TimerControlsProps {\n  currentState: string;\n  startTimer: () => void;\n  handleCustomSelect: (e: React.MouseEvent<HTMLLIElement>) => void;\n  handleSelectionChange: (keys: Set<string>) => void;\n  selectedTimer: string;\n  activeChips: any[];\n  startBreak: () => void;\n  resetTimer: () => void;\n  setCurrentState: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport const TimerControls: React.FC<TimerControlsProps> = ({\n  currentState,\n  startTimer,\n  handleCustomSelect,\n  handleSelectionChange,\n  selectedTimer,\n  activeChips,\n  startBreak,\n  resetTimer,\n  setCurrentState\n}) => {\n  return (\n    <div className=\"mt-4 flex gap-2 justify-center\">\n      {currentState === \"neutral\" && (\n        <>\n          <Button onPress={startTimer} color=\"primary\" variant=\"flat\">Start Session</Button>\n          <Dropdown>\n            <DropdownTrigger>\n              <Button variant=\"flat\">Adjust Session Length</Button>\n            </DropdownTrigger>\n            <DropdownMenu\n              variant=\"flat\"\n              disallowEmptySelection\n              selectionMode=\"single\"\n              selectedKeys={new Set([\n                selectedTimer.startsWith(\"custom-\") ? \"custom\" : selectedTimer,\n              ])}\n              onSelectionChange={(keys) =>\n                handleSelectionChange(keys as Set<string>)\n              }\n            >\n              <DropdownItem key=\"extra-short\">\n                Extra Short Session\n                <span style={{ color: \"gray\", float: \"right\" }}>5m</span>\n              </DropdownItem>\n              <DropdownItem key=\"short\">\n                Short Session\n                <span style={{ color: \"gray\", float: \"right\" }}>15m</span>\n              </DropdownItem>\n              <DropdownItem key=\"medium\">\n                Medium Session\n                <span style={{ color: \"gray\", float: \"right\" }}>25m</span>\n              </DropdownItem>\n              <DropdownItem key=\"long\">\n                Long Session\n                <span style={{ color: \"gray\", float: \"right\" }}>35m</span>\n              </DropdownItem>\n              <DropdownItem key=\"extra-long\">\n                Extra Long Session&nbsp;&nbsp;&nbsp;\n                <span style={{ color: \"gray\", float: \"right\" }}>45m</span>\n              </DropdownItem>\n              <DropdownItem key=\"custom\" onClick={handleCustomSelect}>\n                Custom Session\n                <span style={{ color: \"gray\", float: \"right\" }}>\n                  <ClockIcon className=\"size-6\" />\n                </span>\n              </DropdownItem>\n            </DropdownMenu>\n          </Dropdown>\n        </>\n      )}\n\n      {currentState === \"timer_running\" && (\n        <>\n          <Popover placement=\"bottom\">\n            <PopoverTrigger>\n              <Button variant=\"flat\">Stop Early</Button>\n            </PopoverTrigger>\n            <PopoverContent>\n              <div className=\"px-1 py-2\">\n                <div className=\"flex justify-between items-start\">\n                  <div className=\"flex-grow pr-4\">\n                    <div className=\"text-small font-bold\">Are you sure?</div>\n                    <div className=\"text-tiny\">Your current reward multipliers will be lost.</div>\n                  </div>\n                  <Button \n                    color=\"danger\" \n                    size=\"sm\" \n                    onPress={resetTimer} \n                    className=\"flex-shrink-0 self-center\"\n                  >\n                    Stop\n                  </Button>\n                </div>\n              </div>\n            </PopoverContent>\n          </Popover>\n        </>\n      )}\n\n      {currentState === \"timer_finished\" && (\n        <>\n          <Button onPress={startBreak} color=\"success\" variant=\"shadow\">Start Break</Button>\n          <Button onPress={resetTimer} color=\"default\" variant=\"flat\">Skip Break</Button>\n          <Button onPress={() => setCurrentState(\"neutral\")} color=\"primary\" variant=\"flat\">New Session</Button>\n        </>\n      )}\n\n      {currentState === \"break_running\" && (\n        <>\n          <Button onPress={resetTimer} color=\"danger\" variant=\"light\">End Break</Button>\n        </>\n      )}\n    </div>\n  );\n};"],"names":[],"mappings":"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"}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/components/CustomTimePopover.tsx"],"sourcesContent":["import React from \"react\";\nimport { Popover, PopoverTrigger, PopoverContent, Input, Button } from \"@nextui-org/react\";\n\ninterface CustomTimePopoverProps {\n  isPopoverOpen: boolean;\n  setIsPopoverOpen: (open: boolean) => void;\n  customTime: string;\n  handleCustomTimeChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  handleCustomTimeSubmit: () => void;\n  inputRef: React.RefObject<HTMLInputElement>;\n}\n\nexport const CustomTimePopover: React.FC<CustomTimePopoverProps> = ({\n  isPopoverOpen,\n  setIsPopoverOpen,\n  customTime,\n  handleCustomTimeChange,\n  handleCustomTimeSubmit,\n  inputRef\n}) => {\n  return (\n    isPopoverOpen && (\n      <Popover\n        isOpen={isPopoverOpen}\n        onOpenChange={setIsPopoverOpen}\n        placement=\"bottom\"\n      >\n        <PopoverTrigger>\n          <div></div>\n        </PopoverTrigger>\n        <PopoverContent className=\"p-2 flex items-center\">\n          <div className=\"flex w-full justify-between\">\n            <Input\n              type=\"number\"\n              value={customTime}\n              onChange={handleCustomTimeChange}\n              placeholder=\"Enter minutes\"\n              min={1}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  handleCustomTimeSubmit();\n                }\n              }}\n              ref={inputRef}\n              className=\"w-full\"\n            />\n            <Button onClick={handleCustomTimeSubmit} className=\"ml-2\">Save</Button>\n          </div>\n        </PopoverContent>\n      </Popover>\n    )\n  );\n};"],"names":[],"mappings":";;;;;;;;;;;;AAYO,MAAM,oBAAsD,CAAC,EAClE,aAAa,EACb,gBAAgB,EAChB,UAAU,EACV,sBAAsB,EACtB,sBAAsB,EACtB,QAAQ,EACT;IACC,OACE,+BACE,6LAAC,yNAAA,CAAA,UAAO;QACN,QAAQ;QACR,cAAc;QACd,WAAU;;0BAEV,6LAAC,wOAAA,CAAA,iBAAc;0BACb,cAAA,6LAAC;;;;;;;;;;0BAEH,6LAAC,wOAAA,CAAA,iBAAc;gBAAC,WAAU;0BACxB,cAAA,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,mNAAA,CAAA,QAAK;4BACJ,MAAK;4BACL,OAAO;4BACP,UAAU;4BACV,aAAY;4BACZ,KAAK;4BACL,YAAY,CAAC;gCACX,IAAI,EAAE,GAAG,KAAK,SAAS;oCACrB;gCACF;4BACF;4BACA,KAAK;4BACL,WAAU;;;;;;sCAEZ,6LAAC,sNAAA,CAAA,SAAM;4BAAC,SAAS;4BAAwB,WAAU;sCAAO;;;;;;;;;;;;;;;;;;;;;;;AAMtE;KAxCa"}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/page.tsx"],"sourcesContent":["'use client'\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@nextui-org/react\";\nimport { Tooltip } from \"@nextui-org/react\";\nimport { ClockIcon, TrendingUpIcon } from \"@/components/icons\";\n\nimport { ActiveChips } from \"@/components/ActiveChips\";\nimport { TimerDisplay } from \"@/components/TimerDisplay\";\nimport { TimerControls } from \"@/components/TimerControls\";\nimport { CustomTimePopover } from \"@/components/CustomTimePopover\";\n\nexport default function Home() {\n  const [selectedTimer, setSelectedTimer] = useState<string>(\"medium\");\n  const [timerValue, setTimerValue] = useState<number>(25);\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const [customTime, setCustomTime] = useState<string>(\"\");\n  const [currentState, setCurrentState] = useState<string>(\"neutral\");\n  const [remainingTime, setRemainingTime] = useState<number>(timerValue * 60);\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [breakDuration, setBreakDuration] = useState<number>(5); // Break duration in minutes\n\n  const [activeChips, setActiveChips] = useState([\n    {\n      id: 'reward-card',\n      color: 'success',\n      icon: <TrendingUpIcon className=\"size-6\" />,\n      tooltipContent: (\n        <div className=\"flex items-center\">\n          <TrendingUpIcon className=\"size-6 mr-2\" />\n          <div>\n            <p><b>Reward Card</b></p>\n            <p><span className=\"text-success-600 font-semibold bg-success-100 px-1 rounded border border-success-600\">1.5x</span> Reward Multiplier</p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'streak',\n      color: 'warning',\n      icon: <TrendingUpIcon className=\"size-6\" />,\n      tooltipContent: (\n        <div className=\"flex items-center\">\n          <TrendingUpIcon className=\"size-6 mr-2\" />\n          <div>\n            <p><b>2x Streak</b></p>\n            <p><span className=\"text-success-600 font-semibold bg-success-100 px-1 rounded border border-success-600\">1.2x</span> Reward Multiplier</p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'triple-rare',\n      color: 'danger',\n      icon: <TrendingUpIcon className=\"size-6\" />,\n      tooltipContent: (\n        <div className=\"flex items-center\">\n          <TrendingUpIcon className=\"size-6 mr-2\" />\n          <div>\n            <p><b>Triple Rare</b></p>\n            <p><span className=\"text-success-600 font-semibold bg-success-100 px-1 rounded border border-success-600\">3x</span> Rare Reward Multiplier</p>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: 'short-session',\n      color: 'default',\n      icon: <TrendingUpIcon className=\"size-6\" />,\n      tooltipContent: (\n        <div className=\"flex items-center\">\n          <TrendingUpIcon className=\"size-6 mr-2\" />\n          <div>\n            <p><b>Short Session</b></p>\n            <p><span className=\"font-semibold\">0.7x</span> Reward Multiplier</p>\n          </div>\n        </div>\n      )\n    }\n  ]);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleSelectionChange = (keys: Set<string>) => {\n    const selectedKey = Array.from(keys)[0];\n    if (selectedKey !== \"custom\") {\n      setSelectedTimer(selectedKey);\n      let newTimerValue = 25;\n      switch (selectedKey) {\n        case \"extra-short\":\n          newTimerValue = 5;\n          break;\n        case \"short\":\n          newTimerValue = 15;\n          break;\n        case \"medium\":\n          newTimerValue = 25;\n          break;\n        case \"long\":\n          newTimerValue = 35;\n          break;\n        case \"extra-long\":\n          newTimerValue = 45;\n          break;\n        default:\n          newTimerValue = 25;\n      }\n      setTimerValue(newTimerValue);\n      setRemainingTime(newTimerValue * 60);\n      setCurrentState(\"neutral\");\n    }\n  };\n\n  const handleCustomSelect = (e: React.MouseEvent<HTMLLIElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsPopoverOpen(true);\n  };\n\n  const handleCustomTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCustomTime(e.target.value);\n  };\n\n  const handleCustomTimeSubmit = () => {\n    if (customTime) {\n      setSelectedTimer(`custom-${customTime}`);\n      const customValue = Number(customTime);\n      setTimerValue(customValue);\n      setRemainingTime(customValue * 60);\n      setIsPopoverOpen(false);\n      setCurrentState(\"neutral\");\n    }\n  };\n\n  const startTimer = () => {\n    setCurrentState(\"timer_running\");\n    const interval = setInterval(() => {\n      setRemainingTime((prevTime) => {\n        if (prevTime === 0) {\n          clearInterval(interval);\n          setCurrentState(\"timer_finished\");\n          setRemainingTime(breakDuration * 60); // Set remaining time to break duration\n          setActiveChips([]); // Clear reward modifiers when session is completed\n          return breakDuration * 60;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    setIntervalId(interval);\n  };\n\n  const startBreak = () => {\n    setCurrentState(\"break_running\");\n    const interval = setInterval(() => {\n      setRemainingTime((prevTime) => {\n        if (prevTime === 0) {\n          clearInterval(interval);\n          setCurrentState(\"neutral\");\n          return 0;\n        }\n        return prevTime - 1;\n      });\n    }, 1000);\n    setIntervalId(interval);\n  };\n\n  const resetTimer = () => {\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    }\n    setCurrentState(\"neutral\");\n    setRemainingTime(timerValue * 60);\n    setActiveChips([]); // Clear reward modifiers when session is ended early\n  };\n\n  useEffect(() => {\n    if (isPopoverOpen) {\n      inputRef.current?.focus();\n    }\n  }, [isPopoverOpen]);\n\n  useEffect(() => {\n    if (currentState === \"timer_finished\" || currentState === \"neutral\") {\n      if (intervalId) {\n        clearInterval(intervalId);\n        setIntervalId(null);\n      }\n    }\n  }, [currentState, intervalId]);\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n  };\n\n  return (\n    <section className=\"flex flex-col items-center justify-center gap-4 py-8 md:py-10\">\n      <div className=\"inline-block text-center justify-center\" style={{ width: '30%' }}>\n        <div className=\"relative z-10\">\n          <ActiveChips activeChips={activeChips} />\n\n          <br />\n\n          <TimerDisplay \n            remainingTime={remainingTime} \n            timerValue={timerValue} \n            currentState={currentState} \n            formatTime={formatTime} \n          />\n\n          <TimerControls\n            currentState={currentState}\n            startTimer={startTimer}\n            handleCustomSelect={handleCustomSelect}\n            handleSelectionChange={handleSelectionChange}\n            selectedTimer={selectedTimer}\n            activeChips={activeChips}\n            startBreak={startBreak}\n            resetTimer={resetTimer}\n            setCurrentState={setCurrentState}\n          />\n\n          <CustomTimePopover \n            isPopoverOpen={isPopoverOpen}\n            setIsPopoverOpen={setIsPopoverOpen}\n            customTime={customTime}\n            handleCustomTimeChange={handleCustomTimeChange}\n            handleCustomTimeSubmit={handleCustomTimeSubmit}\n            inputRef={inputRef}\n          />\n        </div>\n      </div> \n    </section>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1017, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}